#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH=${ETCD_PATH:-/deis/controller}
export ETCD_TTL=${ETCD_TTL:-10}

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD ls >/dev/null; do
	echo "waiting for etcd at $ETCD..."
	sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $(($ETCD_TTL+1))

function etcd_set_default {
  etcdctl --no-sync -C $ETCD mk $ETCD_PATH/$1 $2 >/dev/null 2>&1 || true
}

etcd_set_default protocol ${DEIS_PROTOCOL:-http}
etcd_set_default secretKey ${DEIS_SECRET_KEY:-`openssl rand -base64 64 | tr -d '\n'`}
etcd_set_default builderKey ${DEIS_BUILDER_KEY:-`openssl rand -base64 64 | tr -d '\n'`}
etcd_set_default registrationEnabled 1
etcd_set_default webEnabled 0

# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml 2>/dev/null; do
	echo "controller: waiting for confd to write initial templates..."
	sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait for confd to populate all values
while grep -q '<no value>' /templates/confd_settings.py; do
       echo "controller: waiting for confd to write all values..."
       confd -onetime -node $ETCD -config-file /app/confd.toml 2>/dev/null
       sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# remove any pre-existing docker.sock
test -e /var/run/docker.sock && rm -f /var/run/docker.sock

# spawn a docker daemon to run builds
docker -d --storage-driver=btrfs --bip=172.20.42.1/16 &
DOCKER_PID=$!

# wait for docker to start
while [[ ! -e /var/run/docker.sock ]]; do
  sleep 1
done

cd /app

# run an idempotent database migration
sudo -E -u deis ./manage.py syncdb --migrate --noinput

# spawn celery worker in the background
sudo -E -u deis celery worker --app=deis --loglevel=INFO --workdir=/app --pidfile=/tmp/celery.pid &
CELERY_PID=$!

# spawn a gunicorn server in the foreground
sudo -E -u deis ./manage.py run_gunicorn -b 0.0.0.0 -w 8 -t 600 -n deis --log-level debug --pid=/tmp/gunicorn.pid --preload &
GUNICORN_PID=$!

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
	kill -TERM $CELERY_PID $GUNICORN_PID
	wait $CELERY_PID $GUNICORN_PID 2>/dev/null
	exit 0
}
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node $ETCD -config-file /app/confd.toml &
CONFD_PID=$!

echo deis-controller running...

# publish the service to etcd using the injected PORT
if [[ ! -z $PUBLISH ]]; then

	# configure service discovery
	PORT=${PORT:-8000}
	PROTO=${PROTO:-tcp}

	set +e

	# wait for the service to become available on PUBLISH port
	sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

	# while the port is listening, publish to etcd
	while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
		etcdctl --no-sync -C $ETCD set $ETCD_PATH/host $HOST --ttl $ETCD_TTL >/dev/null
		etcdctl --no-sync -C $ETCD set $ETCD_PATH/port $PORT --ttl $ETCD_TTL >/dev/null
		sleep $(($ETCD_TTL/2)) # sleep for half the TTL
	done

	# if the loop quits, something went wrong
	exit 1

fi

wait
